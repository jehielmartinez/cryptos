{"version":3,"sources":["cryptos.png","hooks/useCurrency.js","hooks/useCrypto.js","components/Error.jsx","components/Form.jsx","components/Result.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Label","styled","label","Select","select","useCurrency","initialState","options","useState","state","setState","onChange","e","target","value","map","option","key","code","name","useCrypto","CoinInfo","Id","Name","FullName","ErrorMessage","p","Error","message","Button","input","Form","setCrypto","setCurrency","cryptoList","setCryptoList","error","setError","currency","SelectCurrency","crypto","SelectCrypto","useEffect","a","Axios","get","result","data","Data","callAPI","onSubmit","preventDefault","type","ResultContainer","div","Info","Price","Result","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Container","Image","img","Heading","h1","App","setResult","url","axios","ApiResult","DISPLAY","getConversion","src","image","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0315d058.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptos.96e45d69.png\";","import React, { Fragment, useState } from 'react';\nimport styled from '@emotion/styled';\n\nconst Label = styled.label`\n    font-family: 'Bebas Neue', cursive;\n    color: #FFF;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 2.4rem;\n    margin-top: 2rem;\n    display: block;\n`;\n\nconst Select = styled.select`\n    width: 100%;\n    display:block;\n    padding: 1rem;\n    -webkit-appearance: none;\n    border-radius: 10px;\n    border: none;\n    font-size: 1.2rem;\n`\n\nconst useCurrency = (label, initialState, options) => {\n    const [ state, setState ] = useState(initialState);\n    \n    const Selection = () => (\n        <Fragment>\n            <Label>{label}</Label>\n            <Select\n                onChange = {e => setState(e.target.value)}\n                value = {state}\n            >\n                {options.map(option => (\n                    <option key={option.code} value={option.code}>{option.name}</option>\n                ))};\n            </Select>\n        </Fragment>\n    );\n\n    return [state, Selection, setState]\n};\n\nexport default useCurrency;","import React, { Fragment, useState } from 'react';\nimport styled from '@emotion/styled';\n\nconst Label = styled.label`\n    font-family: 'Bebas Neue', cursive;\n    color: #FFF;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 2.4rem;\n    margin-top: 2rem;\n    display: block;\n`;\n\nconst Select = styled.select`\n    width: 100%;\n    display:block;\n    padding: 1rem;\n    -webkit-appearance: none;\n    border-radius: 10px;\n    border: none;\n    font-size: 1.2rem;\n`\n\nconst useCrypto = (label, initialState, options) => {\n    const [ state, setState ] = useState(initialState);\n    \n    const Selection = () => (\n        <Fragment>\n            <Label>{label}</Label>\n            <Select\n                onChange = {e => setState(e.target.value)}\n                value = {state}\n            >\n                {options.map(option => (\n                    <option key={option.CoinInfo.Id} value={option.CoinInfo.Name}>{option.CoinInfo.FullName}</option>\n                ))}\n            </Select>\n        </Fragment>\n    );\n\n    return [state, Selection, setState]\n};\n\nexport default useCrypto;","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst ErrorMessage = styled.p`\n    background-color: #b7322c;\n    padding: 1rem;\n    color: #FFF;\n    font-size: 30px;\n    text-transform: uppercase;\n    font-weight: bold;\n    text-align: center;\n    font-family: 'Bebas Neue', cursive;\n`;\n\n\nconst Error = ({message}) => {\n    return ( \n        <ErrorMessage>{message}</ErrorMessage>\n     );\n}\n \nexport default Error;","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\n\nimport useCurrency from '../hooks/useCurrency';\nimport useCrypto from '../hooks/useCrypto';\nimport Axios from 'axios';\nimport Error from './Error';\n\nconst Button = styled.input`\n    margin-top: 20px;\n    font-weight: bold;\n    font-size: 20px;\n    padding: 10px;\n    background-color: #66a2fe;\n    border: none;\n    width: 100%;\n    border-radius: 10px;\n    color: #FFF;\n    transition: background-color .3s ease;\n\n    &:hover {\n        background-color: #326AC0;\n        cursor: pointer;\n    }\n`;\n\nconst Form = ({ setCrypto, setCurrency }) => {\n    const BILLS = [\n        {code: 'USD', name: 'US Dollar'},\n        {code: 'MXN', name: 'Mexican Peso'},\n        {code: 'HNL', name: 'Honduran Lempira'},\n        {code: 'EUR', name: 'Euro'},\n        {code: 'GBP', name: 'Pound Sterling'}\n    ];\n    const [ cryptoList, setCryptoList ] = useState([]);\n    const [ error, setError ] = useState(false)\n\n    const [ currency, SelectCurrency ] = useCurrency('Choose your bills', 'USD', BILLS);\n    const [ crypto, SelectCrypto ] = useCrypto('Choose your crypto', 'BTC', cryptoList);\n\n    useEffect(() => {\n        const callAPI = async () => {\n            const url = 'https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD';\n            const result = await Axios.get(url);\n            setCryptoList(result.data.Data);\n        }\n        callAPI()\n    }, [])\n\n    const getValues = e => {\n        e.preventDefault();\n\n        if(currency === '' || crypto === ''){\n            setError(true);\n            return\n        };\n\n        setError(false);    \n\n        setCurrency(currency);\n        setCrypto(crypto);\n    }\n        \n    return (\n        <form\n            onSubmit={getValues}\n        >\n            {error ? <Error message='All fields required'/> : null}\n\n            <SelectCurrency />\n\n            <SelectCrypto />\n\n            <Button \n                type='submit'\n                value='Quote'\n            />\n        </form>\n    );\n}\n \nexport default Form;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst ResultContainer = styled.div`\n    color: #FFF;\n    font-family: Arial, Helvetica, sans-serif;\n`;\n\nconst Info = styled.p`\n    font-size: 18px;\n    span {\n        font-weight:bold;\n    }\n`;\nconst Price = styled.p`\n    font-size: 30px;\n    span {\n        font-weight:bold;\n    }\n`\nconst Result = ({ result }) => {\n    if(Object.keys(result).length === 0) return null;\n    return ( \n        <ResultContainer>\n            <Price>The price is: <span>{result.PRICE}</span> </Price>\n            <Info>Higher today: <span>{result.HIGHDAY}</span> </Info>\n            <Info>Lower today: <span>{result.LOWDAY}</span> </Info>\n            <Info>24h Change Percentage: <span>{result.CHANGEPCT24HOUR}</span> </Info>\n            <Info>Last Update: <span>{result.LASTUPDATE}</span> </Info>\n        </ResultContainer>\n     );\n};\n \nexport default Result;","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport image from './cryptos.png';\nimport Form from './components/Form';\nimport axios from 'axios';\nimport Result from './components/Result';\n\nconst Container = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width:992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Image = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nconst Heading = styled.h1`\n  font-family: 'Bebas Neue', cursive;\n  color: #FFF;\n  text-align: left;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &::after {\n    content: '';\n    width: 100px;\n    height: 6px;\n    background-color: #66A2FE;\n    display: block;\n  }\n`;\n\nfunction App() {\n  const [ currency, setCurrency ] = useState('');\n  const [ crypto, setCrypto] = useState('');\n  const [ result, setResult ] = useState({});\n\n  useEffect(() => {\n    if(currency === '') return;\n\n    const getConversion = async () => {\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${crypto}&tsyms=${currency}`;\n      const ApiResult = await axios.get(url);\n\n      setResult(ApiResult.data.DISPLAY[crypto][currency]);\n    }\n\n    getConversion();\n  }, [currency, crypto])\n\n  return (\n    <Container>\n      <div>\n        <Image\n          src={image}\n          alt='crypto image'\n        />\n      </div>\n      <div>\n        <Heading>Cryptocurrency</Heading>\n        <Form \n          setCurrency = {setCurrency}\n          setCrypto = {setCrypto}\n        />\n        <Result result={result}/>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}